<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Navbar with Buttons</title>
    <link rel="stylesheet" href="styles.css">
</head>
<body>

    <div id="excel">
        <div id="MainPage">
            <h5>Excel data Upload & Download</h5>
            <div id="Outer" class="FormDesign Outer">
                <div id="Inner">
                    <div>
                        <form id="Form">
                            <label for="files"><b>Select Excel file to upload:</b></label>
                            <input type="file" id="fileInput" aria-describedby="fileInputDescription" accept=".xlsx, .xls">
                            <p id="fileInputDescription" class="sr-only">This is the input to select  files.</p>
                            <div>
                                <button onclick="UploadExcel()" type="button" class="theme-radial-gradient">Upload Excel</button>
                            </div>
                            <div>
                                <button onclick="Export_Excel()" type="button" class="theme-radial-gradient">Download Excel</button>
                            </div>
                            <div id="previewContainer" class="preview-container"></div>
                            <div id="mediaURLs"></div>
                        </form>
                    </div>
                </div>
            </div>
            <!-- Table for Previewing and Displaying Data (Always Visible) -->
            <table id="dataTable" class="table table-striped">
                <thead>
                    <tr>
                        <th scope="col">Id</th>
                        <th scope="col">Name</th>
                        <th scope="col">Roll No</th>
                    </tr>
                </thead>
                <tbody id="tableBody">
                    <!-- Initially, the table will be empty -->
                </tbody>
            </table>
            <!-- Action Buttons (Save and Close) -->
            <div class="action-buttons">
                <button id="saveButton" class="btn btn-primary">Save</button>
                <button id="closeButton" class="btn btn-secondary">Close</button>
            </div>
        </div>
    </div>

</body>
</html>
<script src="https://cdn.sheetjs.com/xlsx-latest/package/dist/shim.min.js"></script>
<script src="https://cdn.sheetjs.com/xlsx-latest/package/dist/xlsx.full.min.js"></script>
<script>
    function UploadExcel() {
        debugger;
        var fileInput = document.getElementById('fileInput');
        var file = fileInput.files[0];

        var reader = new FileReader();

        reader.onload = function (e) {
            var data = new Uint8Array(e.target.result);
            var workbook = XLSX.read(data, { type: 'array' });
            var sheetName = workbook.SheetNames[0];
            var worksheet = workbook.Sheets[sheetName];

            var jsonData = XLSX.utils.sheet_to_json(worksheet, { header: 1, raw: false });

            displayData(jsonData);
        };

        reader.readAsArrayBuffer(file);
    }
    
    function displayData(jsonData) {
        debugger;
        var tableBody = document.getElementById('tableBody');
        tableBody.innerHTML = '';  // Clear previous data

        for (var i = 1; i < jsonData.length; i++) {
            var row = jsonData[i];
            var newRow = document.createElement('tr');

            row.forEach(function (cell) {
                var cellElement = document.createElement('td');
                cellElement.textContent = cell;
                newRow.appendChild(cellElement);
            });

            tableBody.appendChild(newRow);
        }
    }

    document.getElementById('saveButton').addEventListener('click', function () {
        debugger;
        var tableBody = document.getElementById('tableBody');
        var rows = tableBody.getElementsByTagName('tr');

        if (rows.length === 0) {
            Swal.fire({
                text: "No data to save. Please import a file first.",
                icon: "warning"
            });
            return;
        }

        processRows(rows, 0);
    });

    function processRows(rows, index) {
        debugger;
        if (index >= rows.length) {
            console.log('All rows have been processed.');
            Swal.fire({
                text: "Your data has been saved successfully.",
                icon: "success"
            }).then(function () {
                location.reload(true);
            });
            return;
        }

        var cells = rows[index].getElementsByTagName('td');
        var rowData = Array.from(cells).map(cell => cell.textContent);

        sendDataToController(rowData, function (success) {
            if (success) {
                console.log(`Row ${index + 1} processed successfully.`);
                processRows(rows, index + 1);
            } else {
                console.error(`Failed to process row ${index + 1}. Moving to the next row.`);
                processRows(rows, index + 1);
            }
        });
    }

    function sendDataToController(data, callback) {
        debugger;
        // Prepare the data to be sent
        var insdata = {
            'id': data[0], // Assuming first column contains ItemCode
            'name': data[2],
            'roll': data[1]
        };

        console.log("Sending Data:", insdata); // Debugging statement

        // AJAX call to send data to the server
        $.ajax({
            type: "POST",
            url: "../Home/Import_Excel",
            data: insdata,
            success: function (response) {
                debugger;
                console.log('Data sent successfully to controller!');
                console.log('Response:', response);
                callback(true); // Indicate success
            },
            error: function (xhr, status, error) {
                debugger;
                console.error('Error sending data to controller:', error);
                console.error('Response:', xhr.responseText);
                callback(false); // Indicate failure
            }
        });
    }

    function Export_Excel() {
        $.ajax({
            url: '../Home/Export_Excel',
            type: "GET",
            dataType: 'json',
            success: function (data) {
                // Filter out only the specified rows
                var filteredData = data.map(function (item) {
                    return {
                        Id: item.id,
                        Name: item.name,
                        Roll: item.roll
                    };
                });

                // Create a new workbook
                var wb = XLSX.utils.book_new();

                // Create worksheet
                var ws = XLSX.utils.json_to_sheet(filteredData);

                // Customize or manually write headings
                ws['A1'] = { v: 'ID', t: 's' };
                ws['B1'] = { v: 'RollNo', t: 's' };
                ws['C1'] = { v: 'Name', t: 's' };
                ws['G1'] = { v: 'Mat. Type', t: 's' };

                // Append the worksheet to the workbook
                XLSX.utils.book_append_sheet(wb, ws, "Sheet1");

                // Convert the workbook to a binary Excel file
                var wbout = XLSX.write(wb, { bookType: 'xlsx', type: 'binary' });

                // Convert binary Excel file to a Blob object
                var blob = new Blob([s2ab(wbout)], { type: 'application/octet-stream' });

                // Create download link and trigger the download
                var url = URL.createObjectURL(blob);
                var link = document.createElement('a');
                link.href = url;
                link.download = 'Student_details.xlsx'; // Set the filename
                document.body.appendChild(link);
                link.click();
                document.body.removeChild(link);
            },
            error: function (error) {
                console.error(error);
            }
        });
    }

    function s2ab(s) {
        var buf = new ArrayBuffer(s.length);
        var view = new Uint8Array(buf);
        for (var i = 0; i != s.length; ++i) view[i] = s.charCodeAt(i) & 0xFF;
        return buf;
    }
    $('#HeaderChange').html('Play with excel data');
</script>
<style>
    * {
        margin: 0;
        padding: 0;
        box-sizing: border-box;
    }

    /* Styling for the navbar */
    .navbar {
        display: flex;
        justify-content: center;
        align-items: center;
    }

    .nav-button {
        background-color: #0f2433;
        border: none;
        color: white;
        padding: 3px 6px;
        margin: 0 10px;
        text-align: center;
        text-decoration: none;
        display: inline-block;
        font-size: 16px;
        border-radius: 5px;
        cursor: pointer;
        transition: background-color 0.3s;
    }

        .nav-button:hover {
            background-color: #242157;
        }

    /* Styling for the main content */
    main {
        padding: 15px;
        text-align: center;
    }

    #field-Width {
        font-size: 75%;
    }

    .FormDesign {
        display: block;
        max-width: 400px;
        margin: 0 auto;
        padding: 20px;
        border: 1px solid #ccc;
        background-color: #f9f9f9;
    }

        .FormDesign label {
            display: block;
        }

        .FormDesign input[type="text"],
        .FormDesign input[type="password"] {
            width: 100%;
            padding: 8px;
            margin-bottom: 15px;
            border: 1px solid #ccc;
            border-radius: 4px;
            box-sizing: border-box;
        }

        .FormDesign button {
            width: 100%;
            padding: 10px;
            background-color: #4CAF50;
            color: white;
            border: none;
            border-radius: 4px;
            cursor: pointer;
        }

            .FormDesign button:hover {
                background-color: #45a049;
            }

    .Outer {
        background-color: aliceblue;
    }

    .field-Width {
        height: 75%;
    }

    h5 {
        display: contents;
        background: #9ed7dd70;
        font-size: 1.25rem;
    }

    #Form {
        text-align: left;
    }

    .preview {
        max-width: 150px;
        max-height: 150px;
        border: 1px solid #ddd;
        border-radius: 4px;
        object-fit: cover;
    }

    #previewContainer {
        text-align: center;
    }
</style>